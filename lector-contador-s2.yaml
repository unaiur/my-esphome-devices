substitutions:
  host_name: lector-contador-s2
  node_name: lector-contador-s2

packages:
  base: !include common/base.yaml

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf
    version: recommended

# Enable logging
logger:
  #level: VERY_VERBOSE
  hardware_uart: USB_CDC

uart:
  - id: uart_home
    tx_pin: GPIO8
    rx_pin: GPIO6
    baud_rate: 9600
    data_bits: 8
    parity: NONE
    stop_bits: 1
    #debug:

  - id: uart_heating
    tx_pin: GPIO17
    rx_pin: GPIO21
    baud_rate: 9600
    data_bits: 8
    parity: NONE
    stop_bits: 1
    #debug:

sml:
  - id: sml_home
    uart_id: uart_home
  - id: sml_heating
    uart_id: uart_heating

globals:
  - id: raw_home_accumulator
    type: int

text_sensor:
  - platform: sml
    sml_id: sml_home
    id: txt_home_consumed_energy
    internal: true
    obis_code: "1-0:1.8.0"
    format: uint
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static int prev_value = 0;
          int next_value = stoi(x);
          if (initialized && next_value != prev_value) {
            auto &accumulator = id(raw_home_accumulator);
            accumulator += next_value - prev_value;
            id(raw_home_net_energy).publish_state(accumulator);
            id(raw_home_net_energy).update();
          }
          initialized = true;
          prev_value = next_value;

  - platform: sml
    sml_id: sml_home
    id: txt_home_returned_energy
    internal: true
    obis_code: "1-0:2.8.0"
    format: uint
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static int prev_value = 0;
          int next_value = stoi(x);
          if (initialized && next_value != prev_value) {
            auto &accumulator = id(raw_home_accumulator);
            accumulator -= next_value - prev_value;
            id(raw_home_net_energy).publish_state(accumulator);
            id(raw_home_net_energy).update();
          }
          initialized = true;
          prev_value = next_value;

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_total
    internal: true
    obis_code: "1-0:1.8.0"
    format: uint
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static int accumulator = 0;
          static int prev_value;
          int next_value = stoi(x);
          if (initialized) {
            accumulator = (7 * accumulator + next_value - prev_value) / 8;
            id(heating_power_total).publish_state(accumulator / 10.0);
            id(heating_power_total).update();
          }
          initialized = true;
          prev_value = next_value;

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_day
    internal: true
    obis_code: "1-0:1.8.1"
    format: uint
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static int accumulator = 0;
          static int prev_value;
          int next_value = stoi(x);
          if (initialized) {
            accumulator = (7 * accumulator + next_value - prev_value) / 8;
            id(heating_power_day).publish_state(accumulator / 10.0);
            id(heating_power_day).update();
          }
          initialized = true;
          prev_value = next_value;

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_night
    internal: true
    obis_code: "1-0:1.8.2"
    format: uint
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static int accumulator = 0;
          static int prev_value;
          int next_value = stoi(x);
          if (initialized) {
            accumulator = (7 * accumulator + next_value - prev_value) / 8;
            id(heating_power_night).publish_state(accumulator / 10.0);
            id(heating_power_night).update();
          }
          initialized = true;
          prev_value = next_value;

sensor:
  - platform: sml
    sml_id: sml_home
    obis_code: "1-0:1.8.0"
    name: "Home Total Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - multiply: 0.0001
      - or:
        - heartbeat: 30s
        - delta: 0.1

  - platform: sml
    sml_id: sml_home
    obis_code: "1-0:2.8.0"
    name: "Home Returned Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - multiply: 0.0001
      - or:
        - heartbeat: 30s
        - delta: 0.1

  - platform: template
    id: raw_home_net_energy
    internal: true
    filters:
      - multiply: 0.1
    on_value:
      then:
      - lambda: |-
          static bool initialized = false;
          static long prev_millis = 0;
          static float prev_value = 0;
          long now = millis();
          long dmillis = now - prev_millis;
          if (initialized) {
            if (x != prev_value && dmillis >= 1000) {
              float v = (x - prev_value) * 3600000.0 / dmillis;
              id(home_net_power).publish_state(v);
              prev_millis = now;
              prev_value = x;
            }
          } else {
            initialized = true;
            prev_millis = now;
            prev_value = x;
          }


  - platform: template
    id: home_net_power
    name: "Home Net Power"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - exponential_moving_average:
          alpha: 0.2
          send_every: 1

  - platform: sml
    sml_id: sml_heating
    name: "Heating Total Energy"
    obis_code: "1-0:1.8.0"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001
  - platform: sml
    sml_id: sml_heating
    name: "Heating HT Energy (day)"
    obis_code: "1-0:1.8.1"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001
  - platform: sml
    sml_id: sml_heating
    name: "Heating NT Energy (night)"
    obis_code: "1-0:1.8.2"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001

  - platform: template
    id: heating_power_total
    name: "Heating Total Power"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 1

  - platform: template
    id: heating_power_day
    name: "Heating HT Power (day)"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 1

  - platform: template
    id: heating_power_night
    name: "Heating NT Power (night)"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 1

  - platform: uptime
    name: Uptime Sensor
