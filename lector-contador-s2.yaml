esphome:
  includes:
    - "custom/Readers.h"

packages:
  base: !include
    file: common/minimal.yaml
    vars:
      host_name: lector-contador-s2
      node_name: lector-contador-s2
  ha: !include common/ha.yaml

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf
    version: recommended

# Enable logging
logger:
  hardware_uart: USB_CDC

uart:
  - id: uart_home
    tx_pin: GPIO8
    rx_pin: GPIO6
    baud_rate: 9600
    data_bits: 8
    parity: NONE
    stop_bits: 1
    #debug:

  - id: uart_heating
    tx_pin: GPIO17
    rx_pin: GPIO21
    baud_rate: 9600
    data_bits: 8
    parity: NONE
    stop_bits: 1
    #debug:

sml:
  - id: sml_home
    uart_id: uart_home
  - id: sml_heating
    uart_id: uart_heating

globals:
  - id: raw_home_accumulator
    type: int

text_sensor:
  - platform: sml
    sml_id: sml_home
    id: txt_home_consumed_energy
    internal: true
    obis_code: "1-0:1.8.0"
    format: uint

  - platform: sml
    sml_id: sml_home
    id: txt_home_returned_energy
    internal: true
    obis_code: "1-0:2.8.0"
    format: uint

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_total
    internal: true
    obis_code: "1-0:1.8.0"
    format: uint

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_day
    internal: true
    obis_code: "1-0:1.8.1"
    format: uint

  - platform: sml
    sml_id: sml_heating
    id: txt_heating_consumed_energy_night
    internal: true
    obis_code: "1-0:1.8.2"
    format: uint

sensor:
  - platform: sml
    sml_id: sml_home
    obis_code: "1-0:1.8.0"
    name: "Home Total Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - multiply: 0.0001
      - or:
        - heartbeat: 30s
        - delta: 0.1

  - platform: sml
    sml_id: sml_home
    obis_code: "1-0:2.8.0"
    name: "Home Returned Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - multiply: 0.0001
      - or:
        - heartbeat: 30s
        - delta: 0.1

  - platform: sml
    sml_id: sml_heating
    name: "Heating Total Energy"
    obis_code: "1-0:1.8.0"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001
  - platform: sml
    sml_id: sml_heating
    name: "Heating HT Energy (day)"
    obis_code: "1-0:1.8.1"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001
  - platform: sml
    sml_id: sml_heating
    name: "Heating NT Energy (night)"
    obis_code: "1-0:1.8.2"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 4
    filters:
      - or:
        - heartbeat: 20s
        - delta: 0.1
      - multiply: 0.0001

  - platform: custom
    lambda: |-
      auto home_consumed_reader = new NumericTextDifferentialReader(id(txt_home_consumed_energy));
      auto home_returned_reader = new NumericTextDifferentialReader(id(txt_home_returned_energy));
      auto home_net_reader = new SubstractReader(home_consumed_reader, home_returned_reader);
      auto heat_total_reader = new NumericTextDifferentialReader(id(txt_heating_consumed_energy_total));
      auto heat_day_reader = new NumericTextDifferentialReader(id(txt_heating_consumed_energy_day));
      auto heat_night_reader = new NumericTextDifferentialReader(id(txt_heating_consumed_energy_night));

      auto home_net_sensor = new ReaderSensor(home_net_reader, 1000);
      auto heat_total_sensor = new ReaderSensor(heat_total_reader);
      auto heat_day_sensor = new ReaderSensor(heat_day_reader);
      auto heat_night_sensor = new ReaderSensor(heat_night_reader);

      std::vector<Component *> components = {home_net_sensor, heat_total_sensor, heat_day_sensor, heat_night_sensor};
      for (Component *c : components) {
         App.register_component(c);
      }
      return {home_net_sensor, heat_total_sensor, heat_day_sensor, heat_night_sensor};

    sensors:
      - name: "Home Net Power"
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        accuracy_decimals: 1
        filters:
          - exponential_moving_average:
              alpha: 0.1
              send_every: 10
          - multiply: 360.0

      - name: "Heating Total Power"
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        accuracy_decimals: 1
        filters:
          - exponential_moving_average:
              alpha: 0.1
              send_every: 10
          - multiply: 360.0

      - name: "Heating HT Power (day)"
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        accuracy_decimals: 1
        filters:
          - exponential_moving_average:
              alpha: 0.1
              send_every: 10
          - multiply: 360.0

      - name: "Heating NT Power (night)"
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        accuracy_decimals: 1
        filters:
          - exponential_moving_average:
              alpha: 0.1
              send_every: 10
          - multiply: 360.0

  - platform: uptime
    name: Uptime Sensor
